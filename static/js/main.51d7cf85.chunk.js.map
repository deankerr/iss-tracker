{"version":3,"sources":["ISSMarker.js","ISSMarkerHistory.js","WeatherPanel.js","PeoplePanel.js","ISSTracker.js","reportWebVitals.js","index.js"],"names":["ISSMarker","style","position","top","MARKER_SIZE_PX","left","className","width","alt","src","ISSMarkerHistory","props","WeatherPanel","data","contents","iconUrl","name","temp","backgroundImage","PeoplePanel","state","isLoaded","people","getPeople","a","fetch","response","json","setState","console","log","message","this","textAlign","marginBottom","map","person","craft","React","Component","MAPS_API_KEY","process","REACT_APP_GOOGLE_MAPS_API_KEY","WEATHER_API_KEY","REACT_APP_OPEN_WEATHER_API_KEY","DEFAULT_CENTER","lat","lng","ISSTracker","ISSPos","ISSPosIsLoaded","ISSPosHistory","weatherPanels","getISSPos","iss_position","latitude","longitude","history","push","handleMapClick","ev","newPanel","getWeather","panel","main","weather","icon","setInterval","center","bootstrapURLKeys","key","zoom","onClick","pos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d7cf85.chunk.js","sourcesContent":["function ISSMarker() {\n  const MARKER_SIZE_PX = 64\n  const markerOffset = MARKER_SIZE_PX / 2\n\n  return (\n    <div style={{position: 'relative', top: -markerOffset, left: -markerOffset }}>\n      <img\n        className=\"ISSMarker\" \n        width={MARKER_SIZE_PX}\n        alt=\"International Space Station\" \n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/International_Space_Station.svg/512px-International_Space_Station.svg.png\" \n        />\n    </div>\n  )\n}\n\nexport default ISSMarker\n","function ISSMarkerHistory(props) {\n  return (\n    <div className=\"historyDot\">\n    </div>\n  )\n}\n\nexport default ISSMarkerHistory\n","function WeatherPanel(props) {\n  const { data } = props\n\n  let contents = <>Loading</>\n  let iconUrl = null\n\n  if (data) {\n    const { name, temp } = data\n    iconUrl = data.iconUrl\n    contents = (\n      <>\n        <div>{name}</div>\n        <div>{temp}&deg;C</div>\n      </>\n    )\n  }\n\n\n  return (\n    <div className=\"weatherPanel\" style={iconUrl ? { backgroundImage: iconUrl } : {}}>\n      {contents}\n    </div>\n  )\n}\n\nexport default WeatherPanel\n","import React from 'react'\n\nclass PeoplePanel extends React.Component {\n  state = {\n    isLoaded: false,\n    people: []\n  }\n\n  componentDidMount() {\n    this.getPeople()\n  }\n\n  getPeople = async () => {\n    try {\n      const response = await fetch(`http://api.open-notify.org/astros.json`)\n      const data = await response.json()\n      this.setState({ people: data.people, isLoaded: true })\n    } catch (err) {\n      console.log('People API Error: ', err.message)\n    }\n  }\n\n  render() {\n    const { isLoaded, people } = this.state\n    return (\n      <div className=\"peoplePanel\">\n        <div style={{ textAlign: 'center', marginBottom: '10px' }}>People In Space</div>\n        {\n          isLoaded\n            ?\n            <div className=\"peopleList\">\n              <ul>\n                {\n                  people.map(person => (\n                    <li>\n                      ({person.craft}) {person.name}\n                    </li>\n                  ))\n                }\n              </ul>\n            </div>\n            :\n            <p>Loading</p>\n        }\n      </div>\n    )\n  }\n\n}\n\nexport default PeoplePanel\n","import React from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport './ISSTracker.css'\n\nimport ISSMarker from './ISSMarker'\nimport ISSMarkerHistory from './ISSMarkerHistory'\nimport WeatherPanel from './WeatherPanel'\nimport PeoplePanel from './PeoplePanel'\n\nconst MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY\nconst WEATHER_API_KEY = process.env.REACT_APP_OPEN_WEATHER_API_KEY\n\nconst DEFAULT_CENTER = { lat: -37.813611, lng: 144.963056 }\nconst DEFAULT_ZOOM = 4\n\nclass ISSTracker extends React.Component {\n  state = {\n    ISSPos: { lat: null, lng: null },\n    ISSPosIsLoaded: false,\n    ISSPosHistory: [],\n    weatherPanels: []\n  }\n\n\n  componentDidMount() {\n    this.getISSPos()\n    setInterval(this.getISSPos, 2000)\n  }\n\n\n  getISSPos = async () => {\n    try {\n      const response = await fetch('http://api.open-notify.org/iss-now.json')\n      const data = await response.json()\n\n      const { latitude, longitude } = data.iss_position\n      const lat = +latitude // convert to number\n      const lng = +longitude\n\n      if (this.state.ISSPosIsLoaded) {\n        let history = this.state.ISSPosHistory\n        history.push(this.state.ISSPos)\n        this.setState({ ISSPosHistory: history })\n      }\n\n      this.setState({ ISSPos: { lat, lng }, ISSPosIsLoaded: true })\n    } catch (err) {\n      console.log('Map API Error: ', err.message)\n    }\n  }\n\n\n  handleMapClick = (ev) => {\n    let newPanel = {\n      lat: ev.lat,\n      lng: ev.lng,\n      data: null\n    }\n\n    this.getWeather(newPanel)\n\n    const weatherPanels = [\n      ...this.state.weatherPanels,\n      newPanel\n    ]\n\n    this.setState({ weatherPanels })\n  }\n\n\n  getWeather = async (panel) => {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${panel.lat}&lon=${panel.lng}&units=metric&appid=${WEATHER_API_KEY}`)\n      const data = await response.json()\n      console.log(\"OpenWeather response:\", data);\n      panel.data = {\n        name: data.name,\n        temp: data.main.temp,\n        iconUrl: `url('http://openweathermap.org/img/wn/${data.weather[0].icon}.png')`\n      }\n    } catch (err) {\n      console.log('Weather API Error: ', err.message)\n    }\n  }\n\n\n  render() {\n    const { lat, lng } = this.state.ISSPos\n    const { ISSPosIsLoaded, weatherPanels } = this.state\n\n    const center = ISSPosIsLoaded ? { lat, lng } : DEFAULT_CENTER\n    const history = this.state.ISSPosHistory\n\n    return (\n      <div className=\"ISSTracker\">\n        <h1>ISS Tracker</h1>\n        <div className=\"latLong\">Lat: {lat || 'Loading'} Long: {lng || 'Loading'}</div>\n\n        <PeoplePanel />\n\n        <div className=\"GoogleMap\">\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: MAPS_API_KEY }}\n            center={center}\n            zoom={DEFAULT_ZOOM}\n            onClick={this.handleMapClick}\n          >\n\n            {history.map(pos => <ISSMarkerHistory lat={pos.lat} lng={pos.lng} />)}\n\n            {\n              ISSPosIsLoaded\n                ?\n                <ISSMarker\n                  lat={lat}\n                  lng={lng}\n                />\n\n                :\n                console.log('Loading ISS Pos')\n            }\n\n\n            {weatherPanels.map(panel => <WeatherPanel {...panel} />)}\n\n          </GoogleMapReact>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ISSTracker\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport ISSTracker from './ISSTracker'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ISSTracker />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}